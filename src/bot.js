const express = require('express');
const path = require('path');
const TelegramBot = require('node-telegram-bot-api');
const logger = require('./utils/logger');

const startAttachController = require('./controllers/startAttachController');
const paymentController = require('./controllers/paymentCallbacksController');

require('dotenv').config();

const server = express();
const port = process.env.PORT || 3000;
const bot = new TelegramBot(process.env.BOT_TOKEN, { polling: false });

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –≤–µ–±—Ö—É–∫–æ–≤
server.post(`/bot`, (req, res) => {
    bot.processUpdate(req.body);
    res.status(200).send('OK');
});

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã (–µ—Å–ª–∏ –Ω—É–∂–Ω—ã)
server.use(express.static(path.join(__dirname, 'TelegramBot-UnigramPayment')));
server.use(express.json());

// === –ù–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç: /set-webhook (–¥–ª—è —Ä—É—á–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook) ===
server.get('/set-webhook', async (req, res) => {
    const webhookUrl = `${process.env.WEBHOOK_URL}/bot`;
    try {
        await bot.setWebHook(webhookUrl);
        logger.message(`‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é: ${webhookUrl}`);
        res.send(`‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${webhookUrl}`);
    } catch (err) {
        logger.error(`‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: ${err.message}`);
        res.status(500).send(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook: ${err.message}`);
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
bot.onText(/^\/start$/, (message) => {
    startAttachController.sendStartMessage(bot, message);
});

bot.on('successful_payment', (message) => {
    paymentController.validateSuccessPurchase(bot, message);
});

bot.on('pre_checkout_query', async (query) => {
    await paymentController.validateInvoiceProcess(bot, query);
});

bot.on('polling_error', (error) => {
    logger.error(`Polling error: ${error.message}`);
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
server.listen(port, async () => {
    logger.message(`Unigram Payment Bot Template started at port: ${port}`);

    const webhookUrl = `${process.env.WEBHOOK_URL}/bot`;

    try {
        await bot.setWebHook(webhookUrl);
        logger.message(`‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏: ${webhookUrl}`);
    } catch (err) {
        logger.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook: ${err.message}`);
        logger.message(`üëâ –û—Ç–∫—Ä–æ–π—Ç–µ https://–≤–∞—à-url/set-webhook –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Ä—É—á–Ω—É—é`);
    }
});
